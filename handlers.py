from aiogram import Router
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import CommandStart, Command
from db import add_user, save_video, update_karma, format_karma_table, get_user_score
from my_queue import add_to_queue, get_next_in_queue, get_video_by_user

router = Router()

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –æ—Ü–µ–Ω–∫–∏
def get_rating_buttons(sender_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üëç", callback_data=f"like_{sender_id}"),
         InlineKeyboardButton(text="üëé", callback_data=f"dislike_{sender_id}")]
    ])

@router.message(CommandStart())
async def start_handler(message: Message):
    user = message.from_user
    add_user(user.id, user.username, user.full_name)
    await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –≤–∏–¥–µ–æ-–∫—Ä—É–∂–æ–∫, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

@router.message(Command("karma"))
async def karma_handler(message: Message):
    user = message.from_user
    score = get_user_score(user.id)
    await message.answer(f"üìä –í–∞—à–∞ –∫–∞—Ä–º–∞: {score}")

@router.message(Command("top"))
async def top_handler(message: Message):
    table = format_karma_table()
    await message.answer(table)

@router.message()
async def video_handler(message: Message):
    if message.video_note or message.video:
        user_id = message.from_user.id
        file_id = message.video_note.file_id if message.video_note else message.video.file_id

        partner = get_next_in_queue(user_id)

        if partner:
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫—Ä—É–∂–æ–∫ –ø–∞—Ä—Ç–Ω—ë—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
                await message.bot.send_video_note(partner, file_id)
                await message.bot.send_message(partner, "–ö–∞–∫ –≤–∞–º —ç—Ç–æ –≤–∏–¥–µ–æ?", reply_markup=get_rating_buttons(user_id))

                # –ü–æ–ª—É—á–∞–µ–º –∫—Ä—É–∂–æ–∫ –æ—Ç –ø–∞—Ä—Ç–Ω—ë—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –Ω–∞–º
                partner_video = get_video_by_user(partner)
                if partner_video:
                    await message.bot.send_video_note(message.chat.id, partner_video)
                    await message.bot.send_message(message.chat.id, "–ö–∞–∫ –≤–∞–º —ç—Ç–æ –≤–∏–¥–µ–æ?", reply_markup=get_rating_buttons(partner))

                await message.answer("‚úÖ –ö—Ä—É–∂–æ–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Å–ª—É—á–∞–π–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")
            except Exception as e:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–º–µ–Ω—è—Ç—å—Å—è –∫—Ä—É–∂–∫–æ–º.")
        else:
            add_to_queue(user_id, file_id)
            save_video(user_id, file_id)
            await message.answer("‚è≥ –ò—â–µ–º –≤–∞–º –ø–∞—Ä—É...")

@router.callback_query()
async def rating_handler(callback: CallbackQuery):
    data = callback.data.split("_")
    action, sender_id = data[0], int(data[1])
    voter_id = callback.from_user.id

    if voter_id == sender_id:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å–æ–≤–∞—Ç—å –∑–∞ —Å–µ–±—è.")
        return

    delta = 1 if action == "like" else -1
    update_karma(sender_id, delta)
    await callback.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à—É –æ—Ü–µ–Ω–∫—É!")
    await callback.message.delete()